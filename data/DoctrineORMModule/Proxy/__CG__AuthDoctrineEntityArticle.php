<?php

namespace DoctrineORMModule\Proxy\__CG__\AuthDoctrine\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Article extends \AuthDoctrine\Entity\Article implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', array($name));

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', array($name, $value));

        return parent::__set($name, $value);
    }



    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'star', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'categorie', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'description', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'video', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'thumb', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'created_at', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'updated_at', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'slug', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'title', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'introduction', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'author', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'id');
        }

        return array('__isInitialized__', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'star', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'categorie', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'description', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'video', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'thumb', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'created_at', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'updated_at', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'slug', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'title', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'introduction', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'author', '' . "\0" . 'AuthDoctrine\\Entity\\Article' . "\0" . 'id');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Article $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getArrayCopy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayCopy', array());

        return parent::getArrayCopy();
    }

    /**
     * {@inheritDoc}
     */
    public function exchangeArray($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'exchangeArray', array($data));

        return parent::exchangeArray($data);
    }

    /**
     * {@inheritDoc}
     */
    public function setStar($star)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStar', array($star));

        return parent::setStar($star);
    }

    /**
     * {@inheritDoc}
     */
    public function getStar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStar', array());

        return parent::getStar();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategorie($categorie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategorie', array($categorie));

        return parent::setCategorie($categorie);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategorie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategorie', array());

        return parent::getCategorie();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setVideo($video)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVideo', array($video));

        return parent::setVideo($video);
    }

    /**
     * {@inheritDoc}
     */
    public function getVideo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVideo', array());

        return parent::getVideo();
    }

    /**
     * {@inheritDoc}
     */
    public function setThumb($thumb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setThumb', array($thumb));

        return parent::setThumb($thumb);
    }

    /**
     * {@inheritDoc}
     */
    public function getThumb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThumb', array());

        return parent::getThumb();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated_at($created_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated_at', array($created_at));

        return parent::setCreated_at($created_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated_at()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated_at', array());

        return parent::getCreated_at();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated_at($updated_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated_at', array($updated_at));

        return parent::setUpdated_at($updated_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated_at()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated_at', array());

        return parent::getUpdated_at();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', array($slug));

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', array());

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setIntroduction($introduction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIntroduction', array($introduction));

        return parent::setIntroduction($introduction);
    }

    /**
     * {@inheritDoc}
     */
    public function getIntroduction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIntroduction', array());

        return parent::getIntroduction();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor($author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', array($author));

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', array());

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

}
